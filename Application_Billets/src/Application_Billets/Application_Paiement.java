/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application_Billets;

import BeanDataBase.BeanConnection;
import PAYP.ReponsePAY;
import PAYP.RequetePAY;
import PackageSecurite.Securite;
import TICKMAP.ReponseTICKMAP;
import TICKMAP.RequeteTICKMAP;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

/**
 *
 * @author Benjamin
 */
public class Application_Paiement extends javax.swing.JFrame {

    /**
     * Creates new form Application_Paiement
     */
    private SecretKey HMAC;
    private PublicKey pukSer;
    private Key PublicKey;
    private PublicKey pkCli;
    public ObjectInputStream ois;
    public ObjectOutputStream oos;
    public Socket sockBillet;
    public Socket sockPaie;
    public BeanConnection bc;
    public String sep;
    
    Object information;
    String[] tab;
    
    public Application_Paiement() {
        initComponents();
        
    }

    Application_Paiement(Application_Billets aThis) {
        initComponents();
        this.setTitle("Paiement");
    }
    Application_Paiement(Application_Confirmation parent) {
        initComponents();
        System.out.println("Application paiement");
        this.HMAC = ((Application_Confirmation)parent).getHMAC();
        this.ois = ((Application_Confirmation)parent).getOis();
        this.oos = ((Application_Confirmation)parent).getOos();
        this.sockBillet = ((Application_Confirmation)parent).getSocket();
        //setWindow();
    }

    Application_Paiement(Application_Confirmation parent, Object information) throws IOException, ClassNotFoundException, FileNotFoundException, KeyStoreException, CertificateException, NoSuchAlgorithmException {
        initComponents();
        System.out.println("Application paiement");
        this.HMAC = ((Application_Confirmation)parent).getHMAC();
        this.ois = ((Application_Confirmation)parent).getOis();
        this.oos = ((Application_Confirmation)parent).getOos();
        this.sockBillet = ((Application_Confirmation)parent).getSocket();
        this.information = information;
        handshake();        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pcb = new javax.swing.JTextField();
        cb = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        am = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Application pour payer");

        jButton1.setText("ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Proprietaire carte bancaire");

        jLabel3.setText("Carte bancaire");

        jButton2.setText("annuler");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Adresse mail");

        am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pcb)
                            .addComponent(cb, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(am))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(pcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(am, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Application paiement ok button");
        try {
            envoiePaiement(information);
//        RequeteTICKMAP req = null;
//            req = new RequeteTICKMAP(RequeteTICKMAP.REQ_VALIDATION, "validation_nok");
//        
//        try {
//            oos = new ObjectOutputStream(sock.getOutputStream());
//            oos.writeObject(req);
//            oos.flush();
//        } catch (IOException ex) {
//            Logger.getLogger(Application_Paiement.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        ReponseTICKMAP rep = null;
//        try {
//            ois = new ObjectInputStream(sock.getInputStream());
//            rep = (ReponseTICKMAP)ois.readObject();
//        } catch (IOException | ClassNotFoundException ex) {
//            Logger.getLogger(Application_Paiement.class.getName()).log(Level.SEVERE, null, ex);
//        }
            
//        System.out.println("test : " + rep.getChargeUtile());
        } catch (IOException | ClassNotFoundException | NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException | CertificateException | KeyStoreException | UnrecoverableKeyException | SignatureException ex) {
            Logger.getLogger(Application_Paiement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            annulePaiement();
        } catch (IOException ex) {
            Logger.getLogger(Application_Paiement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Application_Paiement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application_Paiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application_Paiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application_Paiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application_Paiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application_Paiement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField am;
    private javax.swing.JTextField cb;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField pcb;
    // End of variables declaration//GEN-END:variables

    private void setWindow(Object o) {
        //acc
        //idvol
        //prix uni
        // destination
        //id personne
        System.out.println("object : " + o.toString());
        
    }

    private void handshake() throws IOException, ClassNotFoundException, FileNotFoundException, KeyStoreException, CertificateException, NoSuchAlgorithmException {
        setTrame();
        Properties prop = new Properties();
        FileInputStream in = null;

        try {
            in = new FileInputStream("prop.properties");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            prop.load(in);
            String adresse = prop.getProperty("RESEAU");
            int port = Integer.parseInt(prop.getProperty("PORT_PAIEMENT"));

            sockPaie = new Socket(adresse, port);
                
            } catch (IOException ex) {
                Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        
            PublicKey = Securite.getPublicKey("client");
            RequetePAY rp = new RequetePAY(RequetePAY.REQ_HANDSHAKE, "paiement", (PublicKey)PublicKey);
            oos = new ObjectOutputStream(sockPaie.getOutputStream());
            oos.writeObject(rp); oos.flush();
            
            ReponsePAY r = null;
            ois = new ObjectInputStream(sockPaie.getInputStream());
            r = (ReponsePAY)ois.readObject();
            
            this.pukSer = r.getPub();       
    }
    private void envoiePaiement(Object temp) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, FileNotFoundException, CertificateException, KeyStoreException, UnrecoverableKeyException, SignatureException 
    {
        tab = temp.toString().split("\\$");
        
        if(!(cb.getText().equals("") || pcb.getText().equals("") || am.getText().equals("")))
        {
            Date d = new Date();
            long time = d.getTime();
            String carteB = cb.getText();
            PrivateKey clePrivee = (PrivateKey)Securite.getPrivateKey("client");
            //ASymetriquement
            byte[] carteCrypt = Securite.chiffrement(carteB, pukSer, true);
            
            String nomProp = pcb.getText();
            Float montantTotal = Integer.parseInt(tab[0]) * Float.parseFloat(tab[2]);
            
            String chaineEnClair = nomProp+sep+montantTotal;
            String chaineASigne = carteB+sep+chaineEnClair;
//            byte[] hash = Securite.setDigest(carteB+sep+chaineEnClair, time);
//            byte[] sign = Securite.chiffrement(hash, pukSer, true);
            byte[] sign = Securite.signature(clePrivee, chaineASigne);
            
            RequetePAY rp = new RequetePAY(RequetePAY.REQ_PAIEMENT, "paiement", sign, chaineEnClair, carteCrypt, time, temp);
            oos = new ObjectOutputStream(sockPaie.getOutputStream());
            oos.writeObject(rp); oos.flush();
            
            
            ReponsePAY r = null;
            ois = new ObjectInputStream(sockPaie.getInputStream());
            r = (ReponsePAY)ois.readObject();
            
            majBD(r);
            receptionBD();
        }
    }
    public void setTrame() throws IOException 
    {
                Properties prop = new Properties();
                FileInputStream in = null;
                in = new FileInputStream("prop.properties");
                prop.load(in);
                
                sep = prop.getProperty("SEP_TRAME");
    }

    private void majBD(ReponsePAY r) throws IOException {
        if(r.getChargeUtile().equals("paiement_effectue"))
        {
            RequeteTICKMAP req = null;
            information = information + sep+am.getText();
            req = new RequeteTICKMAP(RequeteTICKMAP.REQ_MAJ, "OK", information);
            
            oos = new ObjectOutputStream(sockBillet.getOutputStream());
            oos.writeObject(req);
            oos.flush();
        }
    }

    private void receptionBD() {
        ReponseTICKMAP rep = null;
        try {        
            ois = new ObjectInputStream(sockBillet.getInputStream());
            rep = (ReponseTICKMAP)ois.readObject();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void annulePaiement() throws IOException, ClassNotFoundException {
        RequeteTICKMAP rp = new RequeteTICKMAP(RequeteTICKMAP.REQ_MAJ, "paiement", information);
        oos = new ObjectOutputStream(sockPaie.getOutputStream());
        oos.writeObject(rp); oos.flush();


        ReponseTICKMAP r = null;
        ois = new ObjectInputStream(sockPaie.getInputStream());
        r = (ReponseTICKMAP)ois.readObject();
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application_Billets;

import PackageSecurite.Securite;
import TICKMAP.*;
import java.io.*;
import java.net.*;
import java.security.*;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;
import javax.security.cert.CertificateException;



/**
 *
 * @author Benjamin
 */
public class Application_Connexion extends javax.swing.JFrame {

    private ObjectInputStream ois;
    private ObjectOutputStream oos; 
    private Socket cliSock;
    private SecretKey serveurSymm;
    private SecretKey HMACSymm;
    private PrivateKey clePrivee;
    public String nom;
    
    public Application_Connexion() throws FileNotFoundException, IOException {
        initComponents();
        Properties prop = new Properties();
        FileInputStream in = new FileInputStream("prop.properties");
        prop.load(in);
        String co = prop.getProperty("RESEAU");
        String serv = prop.getProperty("PORT_BILLETS");
        System.out.println("Connexion : " + co);
        this.adresse_serveur_field.setText(co);
        this.adresse_serveur_field.setEnabled(false);
        this.port_serveur_field.setText(serv);
        this.port_serveur_field.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        tNdc = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        Close = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        Reponse_field = new javax.swing.JTextField();
        isEmploye = new javax.swing.JRadioButton();
        port_serveur_field = new javax.swing.JTextField();
        adresse_serveur_field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tPwd = new javax.swing.JPasswordField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("PASSWORD :");

        tNdc.setText("benjamin");

        send.setText("Envoyer");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        Close.setText("Fermer");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        jLabel4.setText("Réponse reçue : ");

        isEmploye.setText("Employé");
        isEmploye.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isEmployeActionPerformed(evt);
            }
        });

        port_serveur_field.setEnabled(false);
        port_serveur_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                port_serveur_fieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Adresse du Serveur :");

        jLabel5.setText("LOGIN :");

        jLabel2.setText("Port Serveur : ");

        tPwd.setText("jamar");
        tPwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tPwdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel6)
                .addContainerGap(315, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(port_serveur_field, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(adresse_serveur_field, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(38, 38, 38)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tNdc, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                .addComponent(tPwd)))
                        .addComponent(isEmploye)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Close, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(9, 9, 9))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addComponent(jLabel4)
                            .addGap(73, 73, 73)
                            .addComponent(Reponse_field, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(227, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(73, 73, 73))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adresse_serveur_field, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(37, 37, 37)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(port_serveur_field, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tNdc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(isEmploye)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Close)
                        .addComponent(send, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Reponse_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(4, 4, 4)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed

        try {                                     
            
            // TODO add your handling code here:
            String mdp = tPwd.getText();
            String ndc = tNdc.getText();
            RequeteTICKMAP req = null;
            TICKMAP t = null;
            Date d = new Date();
            
            long date = d.getTime();
            
            Properties prop = new Properties();
            FileInputStream in = null;
            
            try {
                in = new FileInputStream("prop.properties");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                prop.load(in);
            } catch (IOException ex) {
                Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                t = new TICKMAP(date, ndc, mdp);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            req = new RequeteTICKMAP(RequeteTICKMAP.REQ_CONNEXION, "requete",d.getTime(), t);
            
            // Connexion au serveur
            ois=null; oos=null; cliSock = null;
            String adresse = prop.getProperty("RESEAU");
            int port = Integer.parseInt(prop.getProperty("PORT_BILLETS"));
            System.out.println("adresse : " + adresse);
            try
            {
                cliSock = new Socket(adresse, port);
                System.out.println(cliSock.getInetAddress().toString());
            }
            catch (UnknownHostException e)
            {
                System.err.println("Erreur ! Host non trouvé [" + e + "]");
            }
            
            catch (IOException e)
            {
                System.err.println("Erreur ! Pas de connexion ? [" + e + "]");
            }
            // Envoie de la requête
            try
            {
                oos = new ObjectOutputStream(cliSock.getOutputStream());
                oos.writeObject(req); oos.flush();
            }
            catch (IOException e)
            {
                System.err.println("Vol Erreur réseau ? [" + e.getMessage() + "]");
            }
            // Lecture de la réponse
            ReponseTICKMAP rep = null;     
            try {
                
                ois = new ObjectInputStream(cliSock.getInputStream());
                rep = (ReponseTICKMAP)ois.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
            }
            

            System.out.println(" *** LOGIN Reponse reçue : " + rep.getChargeUtile());

            if(rep.getChargeUtile().equals("CONNEXION_OK"))
            {
                System.out.println("CONNEXION ACCEPTEE : " + cliSock.toString());

                nom = tNdc.getText();
                
                    try {
                        envoieClePublic();
                        
                    } catch (KeyStoreException | NoSuchAlgorithmException | FileNotFoundException | CertificateException | java.security.cert.CertificateException ex) {
                        System.err.println("Error dans l'envoie de la cle public : " + ex);
                    } catch (NoSuchProviderException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
                    Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    receptionClesSecretes(cliSock);
                        
                    //Si réussi, alors dechiffrement avec la clé privée
                    
                Application_Billets ab = new Application_Billets(this);
                ab.setVisible(true);
                
            }
            else
            {
                System.out.println("CONNEXION REFUSEE");
                jLabel6.setVisible(true);
                jLabel6.setText("Mot de passe ou Login incorrect.");
                try {
                    cliSock.close();
                } catch (IOException ex) {
                    Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        } catch (IOException | ClassNotFoundException | NoSuchAlgorithmException | NoSuchProviderException | NoSuchPaddingException | java.security.cert.CertificateException | KeyStoreException | UnrecoverableKeyException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | SQLException ex) {
            Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_sendActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_CloseActionPerformed

    private void isEmployeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isEmployeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isEmployeActionPerformed

    private void port_serveur_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_port_serveur_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_port_serveur_fieldActionPerformed

    private void tPwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tPwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tPwdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application_Connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application_Connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application_Connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application_Connexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Application_Connexion().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Application_Connexion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.swing.JTextField Reponse_field;
    private javax.swing.JTextField adresse_serveur_field;
    public javax.swing.JRadioButton isEmploye;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField port_serveur_field;
    private javax.swing.JButton send;
    private javax.swing.JTextField tNdc;
    private javax.swing.JPasswordField tPwd;
    // End of variables declaration//GEN-END:variables

    private void envoieClePublic() throws NoSuchAlgorithmException, FileNotFoundException, KeyStoreException, IOException, CertificateException, java.security.cert.CertificateException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        //Faire un objet possédant toutes les valeurs nécessaires
        
        RequeteTICKMAP req = null;
        Key PublicKey = null;
        
        PublicKey = Securite.getPublicKey("client");
       
        req = new RequeteTICKMAP(RequeteTICKMAP.REQ_HANDSHAKE, "requete", (PublicKey)PublicKey);
        
        oos = new ObjectOutputStream(cliSock.getOutputStream());
        oos.writeObject(req); oos.flush();
    }

    private void receptionClesSecretes(Socket cliSock) throws IOException, ClassNotFoundException, NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, FileNotFoundException, java.security.cert.CertificateException, KeyStoreException, UnrecoverableKeyException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        ReponseTICKMAP rep = null;   
        ois = new ObjectInputStream(cliSock.getInputStream());
        rep = (ReponseTICKMAP)ois.readObject();
        
        clePrivee = (PrivateKey)Securite.getPrivateKey("client");
        
        serveurSymm = (SecretKey)Securite.dechiffrement(rep.getCleCrypte(), clePrivee, true);
        HMACSymm = (SecretKey)Securite.dechiffrement(rep.getCleHMAC(), clePrivee, true);
        
    }
    public ObjectOutputStream getOos()
    {
        return this.oos;
    }
    public ObjectInputStream getOis()
    {
        return this.ois;
    }
    public Socket getSocket()
    {
        return this.cliSock;
    }
    public SecretKey getSymm()
    {
        return this.serveurSymm;
    }
    public SecretKey getHMAC()
    {
        return this.HMACSymm;
    }
}

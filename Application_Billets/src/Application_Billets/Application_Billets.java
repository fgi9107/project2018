/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application_Billets;

import BeanDataBase.BeanMySql;
import PackageSecurite.Securite;
import TICKMAP.ReponseTICKMAP;
import TICKMAP.RequeteTICKMAP;
import Utils.ThreadReception;
import Utils.Utils;
import classObj.Vol;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.System.getProperty;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benjamin
 */
public class Application_Billets extends javax.swing.JFrame {

    /**
     * Creates new form Application_Billets
     */
    BeanMySql bc = null;
    ResultSet rs = null;
    Vector vData = null;
    String sep = null; 
    String fin = null;
    Object name = null;
    boolean choix;
    
    private SecretKey serveurSymm;
    private SecretKey HMACSymm;
    
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket sock;
    
    private RequeteTICKMAP req;
    private ReponseTICKMAP rep;
    
    private Utils utilsMethode;
    public Application_Billets() throws SQLException, IOException, ClassNotFoundException {
        initComponents();
        createThread();
    }

    public Application_Billets(Application_Connexion parent) throws SQLException, IOException, ClassNotFoundException {
        initComponents();
        this.ois = ((Application_Connexion)parent).getOis();
        this.oos = ((Application_Connexion)parent).getOos();
        this.sock = ((Application_Connexion)parent).getSocket();
        this.serveurSymm = ((Application_Connexion)parent).getSymm();
        this.HMACSymm = ((Application_Connexion)parent).getHMAC();
        createThread();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabVol = new javax.swing.JTable();
        okButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Vol");

        tabVol.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Date", "Prix", "Places disponibles", "Destination"
            }
        ));
        jScrollPane1.setViewportView(tabVol);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Fermer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Actualise");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(jButton2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        
        if(tabVol.getSelectedRow() != -1)
        {
            name = tabVol.getValueAt(tabVol.getSelectedRow(), NORMAL);
            
            try {
                Application_Clients ac;
                ac = new Application_Clients(this, true);
                ac.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            ReponseTICKMAP rep = null;
            try {                     
                ois = new ObjectInputStream(sock.getInputStream());
                rep = (ReponseTICKMAP)ois.readObject();
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
            }
            //Recoit le msg crypte
            if(rep.getChargeUtile().equals("BILLETS_OK"))
            {
                byte[] comparaison = rep.getCleCrypte();
                byte[] temp = null;
                try {
                    //crypte le message recu en clair
                    temp = Securite.doHMAC(HMACSymm, rep.getMessage());
                } catch (InvalidKeyException | NoSuchAlgorithmException | NoSuchProviderException | IOException ex) {
                    Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
                }
                //COMPARAISON DE HMAC
                if(MessageDigest.isEqual(comparaison, temp))
                {
                    try {                    
                        utilsMethode.setJtable();
                    //renvoie ls msg recu
                        envoieConfirmation(rep.getCleCrypte());

                        choix = receptionConfirmation();
                        
                    } catch (IOException | ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    if(choix)
                    {
                        Application_Confirmation ac;
                        try {
                            ac = new Application_Confirmation(this, rep);
                            ac.setVisible(true);
                        } catch (IOException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException | NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException | ClassNotFoundException ex) {
                            Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
                        }
    //                    try {
    //                        ois = new ObjectInputStream(sock.getInputStream());
    //                        rep = (ReponseTICKMAP)ois.readObject(); 
    //                    } catch (IOException ex) {
    //                        Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
    //                    } catch (ClassNotFoundException ex) {
    //                        Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
    //                    }

                    }
                    //receptionValidation();
                }
                else
                {
                    try {
                        envoieProbleme(rep.getMessage());
                    } catch (IOException ex) {
                        Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        receptionProbleme();
                }
            }
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            utilsMethode.setJtable();
        } catch (SQLException | IOException | ClassNotFoundException ex) {
            System.err.println("update button");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application_Billets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application_Billets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application_Billets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application_Billets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Application_Billets().setVisible(true);
                } catch (SQLException | IOException | ClassNotFoundException ex) {
                    Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTable tabVol;
    // End of variables declaration//GEN-END:variables

//    public void setJtable() throws SQLException, IOException, ClassNotFoundException
//    {
//        DefaultTableModel model = (DefaultTableModel)tabVol.getModel();
//        
//        suppressionLigne(model);
//        
//        req = new RequeteTICKMAP(RequeteTICKMAP.REQ_DATAVOL, "dataVol");
//        oos = new ObjectOutputStream(sock.getOutputStream());
//        oos.writeObject(req); oos.flush();
//
//        rep = null;
//        ois = new ObjectInputStream(sock.getInputStream());
//        rep = (ReponseTICKMAP)ois.readObject();
//        
//        Vector vData;
//        Vol vol;
//        for(Object v : rep.getListVol())
//        {
//            vol = (Vol)v;
//            vData = new Vector();
//            vData.add(vol.getId());
//            vData.add(vol.getDatedepart());
//            vData.add(vol.getNbbillets());
//            vData.add(vol.getPrixbillet());
//            vData.add(vol.getDestination());
//
//            model.addRow(vData);
//        }    
//    }

    private void dataToVector(ResultSet rs1) throws SQLException 
    {
        
        vData.add(rs1.getString("idvols"));
        vData.add(rs1.getString("datedepart"));
        vData.add(rs1.getString("PrixBillet"));
        vData.add(rs1.getString("nbbillets"));
        vData.add(rs1.getString("destination"));
    }
    private boolean billetsIsOk(String charge)
    {
        return charge.equals("BILLETS_OK");
    }
    public ObjectOutputStream getOos()
    {
        return this.oos;
    }
    public Socket getSocket()
    {
        return this.sock;
    }
    public Object getNameVol()
    {
        return this.name;
    }
    public SecretKey getSymm()
    {
        return this.serveurSymm;
    }
    public SecretKey getHMAC()
    {
        return this.HMACSymm;
    }
    public ObjectInputStream getOis()
    {
        return this.ois;
    }

//    private void suppressionLigne(DefaultTableModel model) {
//        if(model.getRowCount()> 0)
//        {
//            System.out.println("Suppression de lignes");
//            while(model.getRowCount() != 0)
//            {
//                model.removeRow(0);
//            }                
//        }    
//    }

    private void envoieConfirmation(byte[] temp) {
        
        try
            {
                req = new RequeteTICKMAP(RequeteTICKMAP.REQ_CONFIRMATION, "confirmation", temp);
                oos = new ObjectOutputStream(sock.getOutputStream());
                oos.writeObject(req); oos.flush();
            }
            catch (IOException e)
            {
                System.err.println("Vol Erreur réseau ? [" + e.getMessage() + "]");
            }
    }
//    private void receptionValidation()
//    {
//        System.err.println("ois : " + ois);
//        ReponseTICKMAP rep = null;
//            try {                     
//                
//                ois = new ObjectInputStream(this.sock.getInputStream());
//                rep = (ReponseTICKMAP)ois.readObject();
//            } catch (IOException | ClassNotFoundException ex) {
//                Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            
//            if(rep.getChargeUtile().equals("VALIDATION_OK"))
//            {
//                Application_Paiement ap = new Application_Paiement(this);
//                ap.setVisible(true);
//                
//            }
//            else{
//                
//            }
//    }

    private boolean receptionConfirmation() throws IOException, ClassNotFoundException {
        rep = null;
        ois = new ObjectInputStream(sock.getInputStream());
        rep = (ReponseTICKMAP)ois.readObject();
        if(rep.getChargeUtile().equals("CONFIRMATION_OK"))
        {
            return true;
        }
        return false;
    }

    private void envoieProbleme(String message) throws IOException {
        req = new RequeteTICKMAP(RequeteTICKMAP.REQ_MAJ, "validation_nok", (Object)message);

        oos = new ObjectOutputStream(sock.getOutputStream());
        oos.writeObject(req);
        oos.flush();    
    }       

    private void receptionProbleme() {
        try {                     

            ois = new ObjectInputStream(sock.getInputStream());
            rep = (ReponseTICKMAP)ois.readObject();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Application_Billets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void createThread() throws SQLException, IOException, ClassNotFoundException
    {
        utilsMethode = new Utils(sock, tabVol);
        utilsMethode.setJtable();
        ThreadReception tr = new ThreadReception(sock, tabVol, utilsMethode);
        tr.start();
    }
}
